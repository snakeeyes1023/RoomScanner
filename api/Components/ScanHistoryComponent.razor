@implements IDisposable

<table class="table table-bordered">
    <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Local est vide</th>
            <th scope="col">Date de vérification</th>
        </tr>
    </thead>
    <tbody>
        @if (ScanHistory != null && ScanHistory.Any())
        {
            @foreach (var item in ScanHistory)
            {
                <tr>
                    <th scope="row">@item.Id</th>
                    <td>@(item.IsLocalEmpty ? "Oui" : "Non")</td>
                    <td>@item.ScanDate</td>
                </tr>
            }
        }
    </tbody>
</table>

@code {

    [Inject]
    public IScanService ScanService { get; set; } = null!;

    private IEnumerable<ScanResultModel>? ScanHistory { get; set; }

    protected override void OnInitialized()
    {
        ScanHistory = ScanService.GetScanResultModels();

        ScanService.OnScanEvent += ScanService_OnScanEvent;
        ScanService.OnClearEvent += ScanService_OnClearEvent;
    }

    private void ScanService_OnScanEvent(object? sender, ScanResultModel e)
    {
        InvokeAsync(() =>
        {
            ScanHistory = ScanService.GetScanResultModels();
            StateHasChanged();
        });
    }

    private void ScanService_OnClearEvent()
    {
        InvokeAsync(() =>
        {
            ScanHistory = ScanService.GetScanResultModels();
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        ScanService.OnScanEvent -= ScanService_OnScanEvent;
        ScanService.OnClearEvent -= ScanService_OnClearEvent;
    }
}
